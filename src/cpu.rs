use crate::memory::Memory;
use std::fs;
use std::path::PathBuf;

const PC_START: u16 = 0x200;
const STACK_SIZE: usize = 16;
const FONT_SPRITES: [u8; 80] = [
    0xf0, 0x10, 0xf0, 0x80, 0xf0, // 0
    0xf0, 0x10, 0xf0, 0x10, 0xf0, // 1
    0xf0, 0x80, 0xf0, 0x90, 0xf0, // 2
    0xf0, 0x10, 0x20, 0x40, 0x40, // 3
    0xf0, 0x90, 0xf0, 0x90, 0x90, // 4
    0xe0, 0x90, 0xe0, 0x90, 0xe0, // 5
    0xf0, 0x80, 0xf0, 0x80, 0xf0, // 6
    0xf0, 0x80, 0xf0, 0x80, 0x80, // 7
    0xf0, 0x90, 0x90, 0x90, 0xf0, // 8
    0x20, 0x60, 0x20, 0x20, 0x70, // 9
    0x90, 0x90, 0xf0, 0x10, 0x10, // A
    0xf0, 0x80, 0xf0, 0x10, 0xf0, // B
    0xf0, 0x90, 0xf0, 0x90, 0xf0, // C
    0xf0, 0x90, 0xf0, 0x10, 0xf0, // D
    0xf0, 0x80, 0x80, 0x80, 0xf0, // E
    0xe0, 0x90, 0x90, 0x90, 0xe0, // F
];

pub struct Cpu {
    pc: u16,
    v: [u8; 16],
    i: u16,
    sp: Vec<u16>,
    mem: Memory,
}

impl Cpu {
    pub fn new() -> Self {
        let mut cpu = Cpu {
            pc: PC_START,
            v: [0; 16],
            i: 0,
            sp: Vec::with_capacity(STACK_SIZE),
            mem: Memory::new(),
        };

        // load font sprites
        cpu.mem.write_data(0x0, &FONT_SPRITES);

        cpu
    }

    pub fn load_rom(&mut self, filename: &PathBuf) {
        let contents = fs::read(filename).expect("could not read the file");
        self.mem.write_data(PC_START, contents.as_slice());
    }
}